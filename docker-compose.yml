# docker-compose.yml - Development Environment Setup

version: '3.8'

services:
  # PostgreSQL database with PostGIS
  db:
    image: postgis/postgis:15-3.3
    container_name: osm_closures_db
    environment:
      POSTGRES_DB: osm_closures_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_postgis.sql:/docker-entrypoint-initdb.d/init_postgis.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and rate limiting (optional)
  redis:
    image: redis:7-alpine
    container_name: osm_closures_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # FastAPI backend application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: osm_closures_api
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/osm_closures_dev
      REDIS_URL: redis://redis:6379/0
      DEBUG: "true"
      ENVIRONMENT: development
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Adminer for database management (optional)
  adminer:
    image: adminer:4.8.1
    container_name: osm_closures_adminer
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      ADMINER_DEFAULT_SERVER: db

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: osm_closures_network

---

# Dockerfile - Backend Container Definition

FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/opt/poetry \
    POETRY_HOME="/opt/poetry" \
    POETRY_VERSION=1.6.1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    libpq-dev \
    gdal-bin \
    libgdal-dev \
    libspatialite7 \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry==$POETRY_VERSION

# Set work directory
WORKDIR /app

# Copy poetry configuration files
COPY pyproject.toml poetry.lock* ./

# Configure poetry and install dependencies
RUN poetry config virtualenvs.create false \
    && poetry install --no-dev --no-interaction --no-ansi

# Copy project files
COPY . .

# Create non-root user
RUN adduser --disabled-password --gecos '' appuser && chown -R appuser /app
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Run the application
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

---

# .dockerignore - Files to exclude from Docker build context

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
env.bak/
venv.bak/
.venv/

# Poetry
poetry.lock

# Testing
.pytest_cache/
.coverage
htmlcov/
.tox/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Git
.git/
.gitignore

# Docker
Dockerfile*
docker-compose*.yml
.dockerignore

# Documentation
README.md
docs/

# Logs
*.log
logs/

# Environment files
.env*
!.env.example

# Database
*.db
*.sqlite
*.sqlite3

# Alembic
alembic/versions/

# Temporary files
tmp/
temp/

---

# .env.example - Environment Variables Template

# Copy this file to .env and update values for your environment

# Application Settings
PROJECT_NAME="OSM Road Closures API"
VERSION="1.0.0"
DEBUG=true
ENVIRONMENT=development
LOG_LEVEL=INFO

# Database Configuration
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/osm_closures_dev
DB_POOL_SIZE=5
DB_MAX_OVERFLOW=10
DB_POOL_RECYCLE=300

# Security Settings
SECRET_KEY=your-secret-key-here-change-this-in-production
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# CORS Settings
ALLOWED_ORIGINS=["http://localhost:3000", "http://localhost:8080"]
ALLOWED_HOSTS=["*"]

# API Configuration
API_V1_STR=/api/v1
DEFAULT_PAGE_SIZE=50
MAX_PAGE_SIZE=1000

# Spatial Query Limits
MAX_BBOX_AREA=1.0

# OpenLR Configuration
OPENLR_ENABLED=true
OPENLR_MAP_VERSION=latest

# External Services
OSM_API_BASE_URL=https://api.openstreetmap.org/api/0.6
NOMINATIM_API_URL=https://nominatim.openstreetmap.org

# Rate Limiting
RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=3600

# Redis Configuration (optional)
REDIS_URL=redis://localhost:6379/0

# File Upload
MAX_UPLOAD_SIZE=10485760  # 10MB

# Email Configuration (for future features)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-password
SMTP_FROM_EMAIL=noreply@osmclosures.org

# Monitoring (optional)
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project

---

# scripts/init_postgis.sql - PostGIS Initialization Script

-- Enable PostGIS extensions
CREATE EXTENSION IF NOT EXISTS postgis;
CREATE EXTENSION IF NOT EXISTS postgis_topology;

-- Create closure type enum
DO $ BEGIN
    CREATE TYPE closure_type_enum AS ENUM ('construction', 'accident', 'event', 'maintenance', 'weather', 'other');
EXCEPTION
    WHEN duplicate_object THEN null;
END $;

-- Create closure status enum
DO $ BEGIN
    CREATE TYPE closure_status_enum AS ENUM ('active', 'expired', 'cancelled', 'planned');
EXCEPTION
    WHEN duplicate_object THEN null;
END $;

-- Check PostGIS version
SELECT PostGIS_Version();

-- Create spatial reference system check
SELECT spatial_ref_sys.srid, spatial_ref_sys.proj4text 
FROM spatial_ref_sys 
WHERE srid = 4326;

-- Grant permissions
GRANT ALL PRIVILEGES ON DATABASE osm_closures_dev TO postgres;

-- Set timezone
SET timezone = 'UTC';