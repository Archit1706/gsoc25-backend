# alembic.ini - Alembic Configuration

[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
file_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d_%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
timezone = UTC

# max length of characters to apply to the
# "slug" field
truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
sourceless = false

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses
# os.pathsep. If this key is omitted entirely, it falls back to the legacy
# behavior of splitting on spaces and/or commas.
version_path_separator = os

# set to 'true' to search source files recursively
# in each "version_locations" directory
recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
output_encoding = utf-8

# Database URL (will be overridden by env.py)
sqlalchemy.url = postgresql://postgres:postgres@localhost:5432/osm_closures_dev

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
hooks = black
black.type = console_scripts
black.entrypoint = black
black.options = -l 79 REVISION_SCRIPT_FILENAME

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

---

# alembic/env.py - Alembic Environment Configuration

import logging
from logging.config import fileConfig
import os
import sys
from sqlalchemy import engine_from_config, pool
from alembic import context

# Add the project root to the Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from app.core.database import Base
from app.config import settings

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Import all models to ensure they're registered with SQLAlchemy
from app.models import user, closure  # noqa

# Set target metadata for autogenerate support
target_metadata = Base.metadata

# Override database URL from settings
config.set_main_option("sqlalchemy.url", settings.get_database_url())


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.
    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,
        compare_server_default=True,
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.
    """
    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

---

# alembic/script.py.mako - Migration Template

"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision = ${repr(up_revision)}
down_revision = ${repr(down_revision)}
branch_labels = ${repr(branch_labels)}
depends_on = ${repr(depends_on)}


def upgrade() -> None:
    ${upgrades if upgrades else "pass"}


def downgrade() -> None:
    ${downgrades if downgrades else "pass"}

---

# scripts/init_db.py - Database Initialization Script

"""
Initialize the database with tables and sample data.
"""
import asyncio
import sys
import os

# Add the project root to the Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from sqlalchemy.orm import Session
from app.core.database import engine, SessionLocal, init_database
from app.models.user import User
from app.models.closure import Closure, ClosureType, ClosureStatus
from app.core.security import hash_password
from datetime import datetime, timezone, timedelta
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def create_sample_users(db: Session) -> dict:
    """Create sample users for testing."""
    users = {}
    
    # Create admin user
    admin_user = User(
        username="admin",
        email="admin@osmclosures.org",
        full_name="System Administrator",
        hashed_password=hash_password("admin123"),
        is_moderator=True,
        is_verified=True
    )
    db.add(admin_user)
    
    # Create regular user
    regular_user = User(
        username="testuser",
        email="user@example.com",
        full_name="Test User",
        hashed_password=hash_password("user123"),
        is_verified=True
    )
    db.add(regular_user)
    
    db.commit()
    db.refresh(admin_user)
    db.refresh(regular_user)
    
    users["admin"] = admin_user
    users["user"] = regular_user
    
    logger.info("Created sample users")
    return users


def create_sample_closures(db: Session, users: dict) -> None:
    """Create sample closures for testing."""
    from sqlalchemy import func
    
    now = datetime.now(timezone.utc)
    
    # Sample closure 1: Construction in Chicago
    closure1 = Closure(
        geometry=func.ST_GeomFromText(
            "LINESTRING(-87.6298 41.8781, -87.6290 41.8785)", 4326
        ),
        description="Water main repair on North Michigan Avenue",
        closure_type=ClosureType.CONSTRUCTION,
        start_time=now - timedelta(hours=2),
        end_time=now + timedelta(hours=6),
        status=ClosureStatus.ACTIVE,
        submitter_id=users["user"].id,
        source="City of Chicago",
        confidence_level=9
    )
    
    # Sample closure 2: Event closure
    closure2 = Closure(
        geometry=func.ST_GeomFromText(
            "LINESTRING(-87.6250 41.8820, -87.6240 41.8825)", 4326
        ),
        description="Marathon route - full street closure",
        closure_type=ClosureType.EVENT,
        start_time=now + timedelta(days=1),
        end_time=now + timedelta(days=1, hours=8),
        status=ClosureStatus.PLANNED,
        submitter_id=users["admin"].id,
        source="Chicago Marathon Organization",
        confidence_level=10
    )
    
    # Sample closure 3: Accident
    closure3 = Closure(
        geometry=func.ST_GeomFromText(
            "LINESTRING(-87.6350 41.8750, -87.6340 41.8755)", 4326
        ),
        description="Multi-vehicle accident - one lane blocked",
        closure_type=ClosureType.ACCIDENT,
        start_time=now - timedelta(minutes=30),
        end_time=now + timedelta(hours=1),
        status=ClosureStatus.ACTIVE,
        submitter_id=users["user"].id,
        source="Chicago Police",
        confidence_level=8
    )
    
    db.add_all([closure1, closure2, closure3])
    db.commit()
    
    logger.info("Created sample closures")


async def main():
    """Main initialization function."""
    try:
        # Initialize database
        await init_database()
        logger.info("Database initialized successfully")
        
        # Create session
        db = SessionLocal()
        
        try:
            # Check if users already exist
            existing_users = db.query(User).count()
            if existing_users > 0:
                logger.info("Database already has users, skipping sample data creation")
                return
            
            # Create sample data
            users = create_sample_users(db)
            create_sample_closures(db, users)
            
            logger.info("Database initialization completed successfully")
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"Database initialization failed: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())

---

# scripts/create_migration.py - Helper Script for Creating Migrations

"""
Helper script to create Alembic migrations.
"""
import subprocess
import sys
import os

def create_migration(message: str, autogenerate: bool = True):
    """Create a new Alembic migration."""
    
    # Change to project root directory
    project_root = os.path.dirname(os.path.dirname(__file__))
    os.chdir(project_root)
    
    # Build alembic command
    cmd = ["alembic", "revision"]
    
    if autogenerate:
        cmd.append("--autogenerate")
    
    cmd.extend(["-m", message])
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print("Migration created successfully:")
        print(result.stdout)
        
        if result.stderr:
            print("Warnings:")
            print(result.stderr)
            
    except subprocess.CalledProcessError as e:
        print(f"Error creating migration: {e}")
        print("stdout:", e.stdout)
        print("stderr:", e.stderr)
        sys.exit(1)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python create_migration.py <migration_message> [--no-autogenerate]")
        sys.exit(1)
    
    message = sys.argv[1]
    autogenerate = "--no-autogenerate" not in sys.argv
    
    create_migration(message, autogenerate) 